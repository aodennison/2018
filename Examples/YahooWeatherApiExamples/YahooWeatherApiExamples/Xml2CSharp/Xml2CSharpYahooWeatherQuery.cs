using System.IO;
using System.Xml.Serialization;

namespace YahooWeatherApiExamples.Xml2CSharp
{
    // Uses YahooWeatherApiExamples.Xml2CSharp classes generated by http://xmltocsharp.azurewebsites.net/
    public class Xml2CSharpYahooWeatherQuery : YahooWeatherQuery
    {
        public Xml2CSharpYahooWeatherQuery() : base(useJsonFormat: false) { }

        #region Overrides of YahooWeatherQuery

        public override string DeserializeAndFormat(string responseData)
        {
            Query rootObject = Deserialize<Query>(responseData);

            return Format(rootObject);
        }

        public static T Deserialize<T>(string xml)
            where T : class
        {
            // Create an instance of the XmlSerializer class;
            // specify the type of object to be deserialized.
            XmlSerializer serializer = new XmlSerializer(typeof(T));

            using (StringReader stream = new StringReader(xml))
            {
                T result = (T)serializer.Deserialize(stream);

                return result;
            }
        }

        private static string Format(Query rootObject)
        {
            using (StringWriter stringWriter = new StringWriter())
            {
                foreach (Channel channel in rootObject.Results.Channel)
                {
                    stringWriter.WriteLine("");

                    Location l = channel.Location;

                    stringWriter.WriteLine((new { l.City, l.Region, l.Country }));

                    foreach (Forecast forecast in channel.Item.Forecast)
                    {
                        stringWriter.WriteLine(
                            new { forecast.Date, forecast.Day, forecast.High, forecast.Low, forecast.Text });
                    }
                }

                return stringWriter.ToString();
            }
        }

        #endregion
    }
}
