// 2018/05/18 A. Dennison created.

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.Collections.Generic;
using System.Globalization;

namespace YahooWeatherApiExamples.Json
{
    /*
    * Generated by https://app.quicktype.io/#l=cs&r=json2csharp  And some hand coding
    *
    * If the correct json is supplied, this generator infers the correct classes.
    *
    * The Yahoo Weather API has a quirk, where channel is polymorphic:
    * A singel: public Channel, or
    * an array/list: public Channel[] - when the results include 2 or more locations.
    * Since only one or the other appears in the JSON from Yahoo,
    * this can be addressed by supplying the quicktype generator with both cases in one sample of JSON.
    * This requires hand editing JSON with a 'result' array with both cases of Channel, since this is never emitted by Yahoo.
    * Quicktype then generates the correct ChannelUnion class, along with the necessary converter.
    * but the generated code is incorrect for Result, since it is not an array, which is not expected output from yahoo,
    * The class for the result node can be edited by hand.
    */
    public partial class JsonDto
    {
        [JsonProperty("query")] public Query Query { get; set; }
    }

    public class Query
    {
        [JsonProperty("count")] public long Count { get; set; }
        [JsonProperty("created")] public DateTimeOffset Created { get; set; }
        [JsonProperty("lang")] public string Lang { get; set; }
        [JsonProperty("results")] public Results Results { get; set; }
    }

    public class Results
    {
        [JsonProperty("channel")] public ChannelUnion ChannelUnion { get; set; }
        public IEnumerable<Channel> Channels => ChannelUnion.Channels;
    }

    public struct ChannelUnion
    {
        public Channel Channel;
        public Channel[] ChannelArray;
        public bool IsNull => ChannelArray == null && Channel == null;
        public IEnumerable<Channel> Channels => ChannelArray == null ? new[] { Channel } : ChannelArray;
    }

    public class Channel
    {
        [JsonProperty("units")] public Units Units { get; set; }
        [JsonProperty("title")] public string Title { get; set; }
        [JsonProperty("link")] public string Link { get; set; }
        [JsonProperty("description")] public string Description { get; set; }
        [JsonProperty("language")] public string Language { get; set; }
        [JsonProperty("lastBuildDate")] public string LastBuildDate { get; set; }
        [JsonProperty("ttl")] public string Ttl { get; set; }
        [JsonProperty("location")] public Location Location { get; set; }
        [JsonProperty("wind")] public Wind Wind { get; set; }
        [JsonProperty("atmosphere")] public Atmosphere Atmosphere { get; set; }
        [JsonProperty("astronomy")] public Astronomy Astronomy { get; set; }
        [JsonProperty("image")] public Image Image { get; set; }
        [JsonProperty("item")] public Item Item { get; set; }
    }

    public class Astronomy
    {
        [JsonProperty("sunrise")] public string Sunrise { get; set; }
        [JsonProperty("sunset")] public string Sunset { get; set; }
    }

    public class Atmosphere
    {
        [JsonProperty("humidity")] public string Humidity { get; set; }
        [JsonProperty("pressure")] public string Pressure { get; set; }
        [JsonProperty("rising")] public string Rising { get; set; }
        [JsonProperty("visibility")] public string Visibility { get; set; }
    }

    public class Image
    {
        [JsonProperty("title")] public string Title { get; set; }
        [JsonProperty("width")] public string Width { get; set; }
        [JsonProperty("height")] public string Height { get; set; }
        [JsonProperty("link")] public string Link { get; set; }
        [JsonProperty("url")] public string Url { get; set; }
    }

    public class Item
    {
        [JsonProperty("title")] public string Title { get; set; }
        [JsonProperty("lat")] public string Lat { get; set; }
        [JsonProperty("long")] public string Long { get; set; }
        [JsonProperty("link")] public string Link { get; set; }
        [JsonProperty("pubDate")] public string PubDate { get; set; }
        [JsonProperty("condition")] public Condition Condition { get; set; }
        [JsonProperty("forecast")] public Forecast[] Forecast { get; set; }
        [JsonProperty("description")] public string Description { get; set; }
        [JsonProperty("guid")] public Guid Guid { get; set; }
    }

    public class Condition
    {
        [JsonProperty("code")] public string Code { get; set; }
        [JsonProperty("date")] public string Date { get; set; }
        [JsonProperty("temp")] public string Temp { get; set; }
        [JsonProperty("text")] public string Text { get; set; }
    }

    public class Forecast
    {
        [JsonProperty("code")] public string Code { get; set; }
        [JsonProperty("date")] public string Date { get; set; }
        [JsonProperty("day")] public string Day { get; set; }
        [JsonProperty("high")] public string High { get; set; }
        [JsonProperty("low")] public string Low { get; set; }
        [JsonProperty("text")] public string Text { get; set; }
    }

    public class Guid
    {
        [JsonProperty("isPermaLink")] public string IsPermaLink { get; set; }
    }

    public class Location
    {
        [JsonProperty("city")] public string City { get; set; }
        [JsonProperty("country")] public string Country { get; set; }
        [JsonProperty("region")] public string Region { get; set; }
    }

    public class Units
    {
        [JsonProperty("distance")] public string Distance { get; set; }
        [JsonProperty("pressure")] public string Pressure { get; set; }
        [JsonProperty("speed")] public string Speed { get; set; }
        [JsonProperty("temperature")] public string Temperature { get; set; }
    }

    public class Wind
    {
        [JsonProperty("chill")] public string Chill { get; set; }
        [JsonProperty("direction")] public string Direction { get; set; }
        [JsonProperty("speed")] public string Speed { get; set; }
    }

    public partial class JsonDto
    {
        public static JsonDto FromJson(string json)
        {
            return JsonConvert.DeserializeObject<JsonDto>(json, Converter.Settings);
        }
    }

    public static class Serialize
    {
        public static string ToJson(this JsonDto self) { return JsonConvert.SerializeObject(self, Converter.Settings); }
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new ChannelUnionConverter(),
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            }
        };
    }

    internal class ChannelUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) { return t == typeof(ChannelUnion) || t == typeof(ChannelUnion?); }

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            
            // this handles the polymorphic channel node, which may be a singleton or an array.
            switch (reader.TokenType)
            {
                case JsonToken.StartObject:
                    Channel objectValue = serializer.Deserialize<Channel>(reader);
                    return new ChannelUnion { Channel = objectValue };
                case JsonToken.StartArray:
                    Channel[] arrayValue = serializer.Deserialize<Channel[]>(reader);
                    return new ChannelUnion { ChannelArray = arrayValue };
            }

            throw new Exception("Cannot unmarshal type ChannelUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            ChannelUnion value = (ChannelUnion)untypedValue;
            if (value.ChannelArray != null)
            {
                serializer.Serialize(writer, value.ChannelArray);
                return;
            }

            if (value.Channel != null)
            {
                serializer.Serialize(writer, value.Channel);
                return;
            }

            throw new Exception("Cannot marshal type ChannelUnion");
        }
    }
}
